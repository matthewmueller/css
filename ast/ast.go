// Package ast contains the AST generated by the parser.
package ast

import (
	"fmt"
	"strings"
)

type Visitor interface {
	VisitStylesheet(*Stylesheet)
}

type Node interface {
	String() string
	Visit(Visitor)
}

var (
	_ Node = &Stylesheet{}
)

type Stylesheet struct {
	Rules []Rule
}

func (s *Stylesheet) String() string {
	sb := new(strings.Builder)
	for i, r := range s.Rules {
		if i > 0 {
			sb.WriteString("\n")
		}
		sb.WriteString(r.String())
	}
	return sb.String()
}

func (s *Stylesheet) Visit(v Visitor) {
	v.VisitStylesheet(s)
}

type Rule interface {
	Node
	rule()
}

var (
	_ Rule = (*StyleRule)(nil)
	_ Rule = (*MediaRule)(nil)
	_ Rule = (*ImportRule)(nil)
	_ Rule = (*KeyFramesRule)(nil)
	_ Rule = (*FontFaceRule)(nil)
)

type StyleRule struct {
	Selectors    []*Selector
	Declarations []*Declaration
}

func (*StyleRule) rule() {}

func (s *StyleRule) String() string {
	sb := new(strings.Builder)
	for i, sel := range s.Selectors {
		if i > 0 {
			sb.WriteString(", ")
		}
		sb.WriteString(sel.String())
	}
	sb.WriteString(" { ")
	for i, decl := range s.Declarations {
		if i > 0 {
			sb.WriteString("; ")
		}
		sb.WriteString(decl.String())
	}
	sb.WriteString(" }")
	return sb.String()
}

func (s *StyleRule) Visit(v Visitor) {
	// v.VisitStyleRule(s)
}

type MediaRule struct {
	Queries []*MediaQuery
	Rules   []Rule
}

func (*MediaRule) rule() {}

func (s *MediaRule) String() string {
	sb := new(strings.Builder)
	sb.WriteString("@media ")
	for i, q := range s.Queries {
		if i > 0 {
			sb.WriteString(", ")
		}
		sb.WriteString(q.String())
	}
	sb.WriteString(" { ")
	for _, r := range s.Rules {
		sb.WriteString(r.String())
	}
	sb.WriteString(" }")
	return sb.String()
}

func (s *MediaRule) Visit(v Visitor) {
	// v.VisitMediaRule(s)
}

type ImportRule struct {
	Url      string
	Layers   []string
	Queries  []*MediaQuery
	Supports SupportsCondition
}

func (*ImportRule) rule() {}

func (s *ImportRule) String() string {
	return ""
}

func (s *ImportRule) Visit(v Visitor) {
	// v.VisitImportRule(s)
}

type KeyFramesRule struct {
	Name      string
	Keyframes []*Keyframe
}

func (*KeyFramesRule) rule() {}

func (s *KeyFramesRule) String() string {
	sb := new(strings.Builder)
	sb.WriteString("@keyframes ")
	sb.WriteString(s.Name)
	sb.WriteString(" { ")
	for i, kf := range s.Keyframes {
		if i > 0 {
			sb.WriteString(" ")
		}
		sb.WriteString(kf.String())
	}
	sb.WriteString(" }")
	return sb.String()
}

func (s *KeyFramesRule) Visit(v Visitor) {
	// v.VisitKeyFramesRule(s)
}

type Keyframe struct {
	Selectors    []KeyframeSelector
	Declarations []*Declaration
}

var _ = (*Keyframe)(nil)

func (s *Keyframe) String() string {
	sb := new(strings.Builder)
	for i, sel := range s.Selectors {
		if i > 0 {
			sb.WriteString(", ")
		}
		sb.WriteString(sel.String())
	}
	sb.WriteString(" { ")
	for i, decl := range s.Declarations {
		if i > 0 {
			sb.WriteString("; ")
		}
		sb.WriteString(decl.String())
	}
	sb.WriteString(" }")
	return sb.String()
}

type KeyframeSelector interface {
	Node
	keyframeSelector()
}

var (
	_ KeyframeSelector = (*Keyword)(nil)
	_ KeyframeSelector = (*Percent)(nil)
)

type FontFaceRule struct {
	Declarations []*Declaration
}

func (*FontFaceRule) rule() {}

func (s *FontFaceRule) String() string {
	sb := new(strings.Builder)
	sb.WriteString("@font-face { ")
	for i, decl := range s.Declarations {
		if i > 0 {
			sb.WriteString("; ")
		}
		sb.WriteString(decl.String())
	}
	sb.WriteString(" }")
	return sb.String()
}

func (s *FontFaceRule) Visit(v Visitor) {
	// v.VisitFontFaceRule(s)
}

// https://drafts.csswg.org/mediaqueries/#media
type MediaQuery struct {
	Qualifier string // only or not
	MediaType string
	Condition MediaCondition
}

var _ Node = (*MediaQuery)(nil)

func (s *MediaQuery) String() string {
	sb := new(strings.Builder)
	if s.Qualifier != "" {
		sb.WriteString(s.Qualifier)
		sb.WriteString(" ")
	}
	if s.MediaType != "" {
		sb.WriteString(s.MediaType)
		sb.WriteString(" ")
		if s.Condition != nil {
			sb.WriteString("and ")
		}
	}
	if s.Condition != nil {
		sb.WriteString(s.Condition.String())
	}
	return sb.String()
}

func (s *MediaQuery) Visit(v Visitor) {
	// v.VisitMediaQuery(s)
}

type MediaCondition interface {
	Node
	mediaCondition()
}

var (
	_ MediaCondition = (*RawMediaCondition)(nil)
)

type RawMediaCondition struct {
	Value string
}

func (*RawMediaCondition) mediaCondition() {}

func (s *RawMediaCondition) String() string {
	fmt.Println(s.Value)
	return "(" + s.Value + ")"
}

func (s *RawMediaCondition) Visit(v Visitor) {
	// v.VisitRawMediaCondition(s)
}

type SupportsCondition interface {
	Node
	supportsCondition()
}

type Selector struct {
	Components []SelectorComponent
}

var _ Node = &Selector{}

func (s *Selector) String() string {
	sb := new(strings.Builder)
	for _, c := range s.Components {
		sb.WriteString(c.String())
	}
	return sb.String()
}

func (s *Selector) Visit(v Visitor) {
	// v.VisitSelector(s)
}

type SelectorComponent interface {
	Node
	selectorComponent()
}

var (
	_ SelectorComponent = (*CombinatorComponent)(nil)
	_ SelectorComponent = (*UniversalComponent)(nil)
	_ SelectorComponent = (*NamespaceComponent)(nil)
	_ SelectorComponent = (*ElementComponent)(nil)
	_ SelectorComponent = (*IdComponent)(nil)
	_ SelectorComponent = (*ClassComponent)(nil)
	_ SelectorComponent = (*AttributeComponent)(nil)
	_ SelectorComponent = (*PseudoClassComponent)(nil)
	_ SelectorComponent = (*PseudoClassFunctionComponent)(nil)
	_ SelectorComponent = (*PseudoElementComponent)(nil)
	_ SelectorComponent = (*NestingComponent)(nil)
)

type CombinatorComponent struct {
	Value string
}

func (*CombinatorComponent) selectorComponent() {}

func (c *CombinatorComponent) String() string {
	if c.Value == " " {
		return c.Value
	}
	return " " + c.Value + " "
}

func (c *CombinatorComponent) Visit(v Visitor) {
	// v.VisitCombinatorComponent(c)
}

type UniversalComponent struct{}

func (*UniversalComponent) selectorComponent() {}

func (*UniversalComponent) String() string {
	return "*"
}

func (*UniversalComponent) Visit(v Visitor) {
	// v.VisitUniversalComponent(c)
}

type NamespaceComponent struct {
	Kind   string
	Prefix string
}

func (*NamespaceComponent) selectorComponent() {}

func (*NamespaceComponent) String() string {
	return ""
}

func (*NamespaceComponent) Visit(v Visitor) {
	// v.VisitNamespaceComponent(c)
}

type ElementComponent struct {
	Name string
}

func (*ElementComponent) selectorComponent() {}

func (e *ElementComponent) String() string {
	return e.Name
}

func (*ElementComponent) Visit(v Visitor) {
	// v.VisitElementComponent(c)
}

type IdComponent struct {
	Name string
}

func (*IdComponent) selectorComponent() {}

func (c *IdComponent) String() string {
	return "#" + c.Name
}

func (c *IdComponent) Visit(v Visitor) {
	// v.VisitIdComponent(c)
}

type ClassComponent struct {
	Name string
}

func (*ClassComponent) selectorComponent() {}

func (c *ClassComponent) String() string {
	return "." + c.Name
}

func (c *ClassComponent) Visit(v Visitor) {
	// v.VisitClassComponent(c)
}

type PseudoClassComponent struct {
	Name string
}

func (*PseudoClassComponent) selectorComponent() {}

func (c *PseudoClassComponent) String() string {
	return ":" + c.Name
}

func (c *PseudoClassComponent) Visit(v Visitor) {
	// v.VisitPseudoClassComponent(c)
}

type PseudoClassFunctionComponent struct {
	Name string
	Args []Value
}

func (*PseudoClassFunctionComponent) selectorComponent() {}

func (c *PseudoClassFunctionComponent) String() string {
	sb := new(strings.Builder)
	sb.WriteString(":")
	sb.WriteString(c.Name)
	sb.WriteString("(")
	for i, arg := range c.Args {
		if i > 0 {
			sb.WriteString(", ")
		}
		sb.WriteString(arg.String())
	}
	sb.WriteString(")")
	return sb.String()
}

func (c *PseudoClassFunctionComponent) Visit(v Visitor) {
	// v.VisitPseudoClassFunctionComponent(c)
}

type PseudoElementComponent struct {
	Name string
}

func (*PseudoElementComponent) selectorComponent() {}

func (c *PseudoElementComponent) String() string {
	return "::" + c.Name
}

func (c *PseudoElementComponent) Visit(v Visitor) {
	// v.VisitPseudoElementComponent(c)
}

type AttributeComponent struct {
	Name      string
	Operation *AttributeOperation
}

var _ Node = (*AttributeComponent)(nil)

func (*AttributeComponent) selectorComponent() {}

func (c *AttributeComponent) String() string {
	sb := new(strings.Builder)
	sb.WriteString("[")
	sb.WriteString(c.Name)
	if c.Operation != nil {
		sb.WriteString(c.Operation.String())
	}
	sb.WriteString("]")
	return sb.String()
}

type AttributeOperation struct {
	Operator string
	Value    string
}

var _ Node = (*AttributeOperation)(nil)

func (s *AttributeOperation) String() string {
	return s.Operator + s.Value
}

func (s *AttributeOperation) Visit(v Visitor) {
	// v.VisitAttributeOperation(s)
}

func (*AttributeComponent) Visit(v Visitor) {
	// v.VisitAttributeComponent(c)
}

type NestingComponent struct{}

func (*NestingComponent) selectorComponent() {}

func (*NestingComponent) String() string {
	return ""
}

func (*NestingComponent) Visit(v Visitor) {
	// v.VisitNestingComponent(c)
}

type Declaration struct {
	Property  string
	Value     Value
	Important bool
}

func (s *Declaration) String() string {
	sb := new(strings.Builder)
	sb.WriteString(s.Property)
	sb.WriteString(": ")
	sb.WriteString(s.Value.String())
	if s.Important {
		sb.WriteString(" !important")
	}
	return sb.String()
}

func (s *Declaration) Visit(v Visitor) {
	// v.VisitDeclaration(s)
}

type Value interface {
	Node
	value()
}

var (
	_ Value = (*Keyword)(nil)
	_ Value = (*Length)(nil)
	_ Value = (*Percent)(nil)
	_ Value = (*Number)(nil)
	_ Value = (*RawValue)(nil)
)

type Keyword struct {
	Value string
}

func (*Keyword) value()            {}
func (*Keyword) keyframeSelector() {}

func (s *Keyword) String() string {
	return s.Value
}

func (s *Keyword) Visit(v Visitor) {
	// v.VisitKeywordValue(s)
}

type Length struct {
	Value string
	Unit  string
}

func (*Length) value() {}

func (s *Length) String() string {
	return s.Value + s.Unit
}

func (s *Length) Visit(v Visitor) {
	// v.VisitLengthValue(s)
}

type Percent struct {
	Value string
}

func (*Percent) value()            {}
func (*Percent) keyframeSelector() {}

func (s *Percent) String() string {
	return s.Value + "%"
}

func (s *Percent) Visit(v Visitor) {
	// v.VisitPercentValue(s)
}

type Number struct {
	Value string
}

func (*Number) value() {}

func (s *Number) String() string {
	return s.Value
}

func (s *Number) Visit(v Visitor) {
	// v.VisitNumberValue(s)
}

type RawValue struct {
	Value string
}

func (*RawValue) value() {}

func (s *RawValue) String() string {
	return s.Value
}

func (s *RawValue) Visit(v Visitor) {
	// v.VisitRawValue(s)
}
