// Package ast contains the AST generated by the parser.
package ast

import "strings"

type Visitor interface {
	VisitStylesheet(*Stylesheet)
}

type Node interface {
	String() string
	Visit(Visitor)
}

var (
	_ Node = &Stylesheet{}
)

type Stylesheet struct {
	Rules []Rule
}

func (s *Stylesheet) String() string {
	sb := new(strings.Builder)
	for _, r := range s.Rules {
		sb.WriteString(r.String())
	}
	return sb.String()
}

func (s *Stylesheet) Visit(v Visitor) {
	v.VisitStylesheet(s)
}

type Rule interface {
	Node
	rule()
}

var (
	_ Rule = (*StyleRule)(nil)
	_ Rule = (*MediaRule)(nil)
	_ Rule = (*ImportRule)(nil)
	_ Rule = (*KeyFramesRule)(nil)
	_ Rule = (*FontFaceRule)(nil)
)

type StyleRule struct {
	Selectors    []*Selector
	Declarations []*Declaration
}

func (*StyleRule) rule() {}

func (s *StyleRule) String() string {
	sb := new(strings.Builder)
	for i, sel := range s.Selectors {
		if i > 0 {
			sb.WriteString(", ")
		}
		sb.WriteString(sel.String())
	}
	sb.WriteString(" { ")
	for i, decl := range s.Declarations {
		if i > 0 {
			sb.WriteString("; ")
		}
		sb.WriteString(decl.String())
	}
	sb.WriteString(" }")
	return sb.String()
}

func (s *StyleRule) Visit(v Visitor) {
	// v.VisitStyleRule(s)
}

type MediaRule struct {
	Queries []*MediaQuery
	Rules   []Rule
}

func (*MediaRule) rule() {}

func (s *MediaRule) String() string {
	return ""
}

func (s *MediaRule) Visit(v Visitor) {
	// v.VisitMediaRule(s)
}

type ImportRule struct {
	Url      string
	Layers   []string
	Queries  []*MediaQuery
	Supports SupportsCondition
}

func (*ImportRule) rule() {}

func (s *ImportRule) String() string {
	return ""
}

func (s *ImportRule) Visit(v Visitor) {
	// v.VisitImportRule(s)
}

type KeyFramesRule struct {
	Keyframes      []Keyframe
	Name           string
	VendorPrefixes []string
}

func (*KeyFramesRule) rule() {}

func (s *KeyFramesRule) String() string {
	return ""
}

func (s *KeyFramesRule) Visit(v Visitor) {
	// v.VisitKeyFramesRule(s)
}

type Keyframe struct {
	Declarations []Declaration
	Selectors    []KeyframeSelector
}

type KeyframeSelector interface {
	Node
	keyframeSelector()
}

type FontFaceRule struct {
	Properties []FontFaceProperty
}

func (*FontFaceRule) rule() {}

func (s *FontFaceRule) String() string {
	return ""
}

func (s *FontFaceRule) Visit(v Visitor) {
	// v.VisitFontFaceRule(s)
}

type FontFaceProperty interface {
	Node
	fontFaceProperty()
}

type MediaQuery struct {
	Condition MediaCondition
	MediaType string
	Qualifier string
}

type MediaCondition interface {
	Node
	mediaCondition()
}

type SupportsCondition interface {
	Node
	supportsCondition()
}

type Selector struct {
	Components []SelectorComponent
}

var _ Node = &Selector{}

func (s *Selector) String() string {
	sb := new(strings.Builder)
	for _, c := range s.Components {
		sb.WriteString(c.String())
	}
	return sb.String()
}

func (s *Selector) Visit(v Visitor) {
	// v.VisitSelector(s)
}

type SelectorComponent interface {
	Node
	selectorComponent()
}

var (
	_ SelectorComponent = (*CombinatorComponent)(nil)
	_ SelectorComponent = (*UniversalComponent)(nil)
	_ SelectorComponent = (*NamespaceComponent)(nil)
	_ SelectorComponent = (*ElementComponent)(nil)
	_ SelectorComponent = (*IdComponent)(nil)
	_ SelectorComponent = (*ClassComponent)(nil)
	_ SelectorComponent = (*AttributeComponent)(nil)
	_ SelectorComponent = (*NestingComponent)(nil)
)

type CombinatorComponent struct {
	Kind  string
	Value string
}

func (*CombinatorComponent) selectorComponent() {}

func (c *CombinatorComponent) String() string {
	return c.Value
}

func (c *CombinatorComponent) Visit(v Visitor) {
	// v.VisitCombinatorComponent(c)
}

type UniversalComponent struct{}

func (*UniversalComponent) selectorComponent() {}

func (*UniversalComponent) String() string {
	return ""
}

func (*UniversalComponent) Visit(v Visitor) {
	// v.VisitUniversalComponent(c)
}

type NamespaceComponent struct {
	Kind   string
	Prefix string
}

func (*NamespaceComponent) selectorComponent() {}

func (*NamespaceComponent) String() string {
	return ""
}

func (*NamespaceComponent) Visit(v Visitor) {
	// v.VisitNamespaceComponent(c)
}

type ElementComponent struct {
	Name string
}

func (*ElementComponent) selectorComponent() {}

func (e *ElementComponent) String() string {
	return e.Name
}

func (*ElementComponent) Visit(v Visitor) {
	// v.VisitElementComponent(c)
}

type IdComponent struct {
	Name string
}

func (*IdComponent) selectorComponent() {}

func (*IdComponent) String() string {
	return ""
}

func (*IdComponent) Visit(v Visitor) {
	// v.VisitIdComponent(c)
}

type ClassComponent struct {
	Name string
}

func (*ClassComponent) selectorComponent() {}

func (*ClassComponent) String() string {
	return ""
}

func (*ClassComponent) Visit(v Visitor) {
	// v.VisitClassComponent(c)
}

type PseudoClassComponent interface {
	Node
	selectorComponent()
	pseudoClassComponent()
}

type PseudoElementComponent interface {
	Node
	selectorComponent()
	pseudoElementComponent()
}

type AttributeComponent struct {
	Name string
	// TODO
	// Namespace NamespaceContraint
	// Operation AttributeOperation
}

func (*AttributeComponent) selectorComponent() {}

func (*AttributeComponent) String() string {
	return ""
}

func (*AttributeComponent) Visit(v Visitor) {
	// v.VisitAttributeComponent(c)
}

type NestingComponent struct{}

func (*NestingComponent) selectorComponent() {}

func (*NestingComponent) String() string {
	return ""
}

func (*NestingComponent) Visit(v Visitor) {
	// v.VisitNestingComponent(c)
}

type Declaration struct {
	Property       string
	Value          Value
	Important      bool
	VendorPrefixes []string
}

func (s *Declaration) String() string {
	sb := new(strings.Builder)
	sb.WriteString(s.Property)
	sb.WriteString(": ")
	sb.WriteString(s.Value.String())
	if s.Important {
		sb.WriteString(" !important")
	}
	return sb.String()
}

func (s *Declaration) Visit(v Visitor) {
	// v.VisitDeclaration(s)
}

type Value interface {
	Node
	value()
}

var (
	_ Value = (*LengthValue)(nil)
	_ Value = (*NumberValue)(nil)
)

type LengthValue struct {
	Value string
	Unit  string
}

func (*LengthValue) value() {}

func (s *LengthValue) String() string {
	return s.Value + s.Unit
}

func (s *LengthValue) Visit(v Visitor) {
	// v.VisitLengthValue(s)
}

type NumberValue struct {
	Value string
}

func (*NumberValue) value() {}

func (s *NumberValue) String() string {
	return s.Value
}

func (s *NumberValue) Visit(v Visitor) {
	// v.VisitNumberValue(s)
}
